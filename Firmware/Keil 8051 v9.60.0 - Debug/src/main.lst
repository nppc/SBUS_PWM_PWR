C51 COMPILER V9.60.0.0   MAIN                                                              11/04/2023 21:11:44 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\src\main.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5_3\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\src\Tennp\G
                    -it\SBUS_PWM_PWR\Firmware\src\main.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SP
                    -EED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/SiliconLabs/SimplicityStudio/v5_3/developer/sdks/8051/v4.2.3
                    -//Device/EFM8BB51/inc;C:/SiliconLabs/SimplicityStudio/v5_3/developer/sdks/8051/v4.2.3//Device/shared/si8051Base) PRINT(.
                    -\src\main.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\main.OBJ)

line level    source

   1          //#pragma src
   2          //-----------------------------------------------------------------------------
   3          // Includes
   4          //-----------------------------------------------------------------------------
   5          #include "main.h"
   6          #include "InitDevice.h"
   7          #include "sbus.h"
   8          #include "button.h"
   9          #include "adc.h"
  10          
  11          #define BUT_SENS_HIGH (CMP1CN0 & CMP1CN0_CPOUT__POS_GREATER_THAN_NEG)
  12          
  13          volatile U16_U8 pwm_channels[4];
  14          //volatile bit startup_reset;
  15          volatile bit PWM_started = false;
  16          volatile uint8_t delay_powering_counter;
  17          volatile uint8_t led_pattern = 0, led_pattern_counter = 0;
  18          // 0 - led off: Module is not powered
  19          // 1 - led on: Module is powered
  20          // 2 - fast blink: Module is in startup/shutdown process
  21          // 3 - slow blink: After starting up indicates a low battery
  22          
  23          volatile uint16_t timeout_counter = 0;
  24          volatile bit timeout_tick = false;
  25          
  26          //-----------------------------------------------------------------------------
  27          // SiLabs_Startup() Routine
  28          // ----------------------------------------------------------------------------
  29          // This function is called immediately after reset, before the initialization
  30          // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
  31          // useful place to disable the watchdog timer, which is enable by default
  32          // and may trigger before main() in some instances.
  33          //-----------------------------------------------------------------------------
  34          void SiLabs_Startup(void) {
  35   1      
  36   1      }
  37          
  38          //-----------------------------------------------------------------------------
  39          // main() Routine
  40          // ----------------------------------------------------------------------------
  41          int main(void) {
  42   1      
  43   1        enter_DefaultMode_from_RESET();
  44   1      
  45   1        PIN_MOSFET = false; // turn power mosfet off
  46   1      
  47   1        ADC0CN0_ADBUSY = true; // Start first conversion
  48   1      
  49   1        // PWM is disabled.
  50   1      
  51   1        IE_EA = true; //Enable interrupts
  52   1      
C51 COMPILER V9.60.0.0   MAIN                                                              11/04/2023 21:11:44 PAGE 2   

  53   1        // we wait for button to be pressed for at least 2 sec to ensure this is intended power on.
  54   1        led_pattern = 2; // fast blink
  55   1        delay_powering_counter = 0;
  56   1        while(delay_powering_counter<125){
  57   2            //if (BUT_SENS_HIGH && delay_powering_counter>50) goPowerDown(); // if button released too early
  58   2            PCON0 |= PCON0_CPUIDLE__BMASK; // go to IDLE
  59   2            PCON0 = PCON0; // ... followed by a 3-cycle dummy instruction
  60   2        }
  61   1      
  62   1        led_pattern = 1; // LED ON
  63   1        while(!BUT_SENS_HIGH); // wait until button is released
  64   1        waitNms(100); // wait for debounce
  65   1      
  66   1        PIN_MOSFET = true; // turn on power mosfet
  67   1      
  68   1        set_button_active();
  69   1        // now button behavior is reversed
  70   1        waitNms(100); // wait for new button levels stabilize
  71   1      
  72   1        while(1){
  73   2            // Power down if button pressed
  74   2            if(BUT_SENS_HIGH) { // Power button is pressed
  75   3                if(led_pattern != 2){
  76   4                    led_pattern = 2; // fast blink
  77   4                    delay_powering_counter = 0; // start counter for power off
  78   4                }
  79   3                if (delay_powering_counter>125) {
  80   4                    led_pattern = 0; // LED OFF
  81   4                    while(BUT_SENS_HIGH); // wait until button is released
  82   4                    waitNms(100);
  83   4                    goPowerDown(); // go power down
  84   4                }
  85   3            }else if(led_pattern == 2) led_pattern = 1; // restore led pattern
  86   2      
  87   2            if(sbus_packet_received){
  88   3                // check pack validity (secondary check)
  89   3                uint8_t tmp = sbus_packet[0];
  90   3                sbus_packet_received = false;
  91   3                if(sbus_parse()){
  92   4                    // packet is well received
  93   4                    uint16_t tmp;
  94   4                    timeout_counter = 0;
  95   4                    // convert sbus data to PWM and map channels to output
  96   4                    tmp = convert_sbus_2_pwm(sbus_ch[1]);
  97   4                    IE_EA = false;
  98   4                    pwm_channels[0].u16 = tmp;
  99   4                    IE_EA = true;
 100   4                    tmp = convert_sbus_2_pwm(sbus_ch[2]);
 101   4                    IE_EA = false;
 102   4                    pwm_channels[1].u16 = tmp;
 103   4                    IE_EA = true;
 104   4                    tmp = convert_sbus_2_pwm(sbus_ch[3]);
 105   4                    IE_EA = false;
 106   4                    pwm_channels[2].u16 = tmp;
 107   4                    IE_EA = true;
 108   4                    tmp = convert_sbus_2_pwm(sbus_ch[0]);
 109   4                    IE_EA = false;
 110   4                    pwm_channels[3].u16 = tmp;
 111   4                    IE_EA = true;
 112   4      
 113   4                    if(!PWM_started){
 114   5                        PWM_started = true;
 115   5                        PCA0POL = PCA0POL_CEX0POL__INVERT | PCA0POL_CEX1POL__INVERT;
C51 COMPILER V9.60.0.0   MAIN                                                              11/04/2023 21:11:44 PAGE 3   

 116   5                        //SFRPAGE = 0x10;
 117   5                        //PWMCPUDL0 = pwm_channels[2].u8[1];
 118   5                        //PWMCPUDH0 = pwm_channels[2].u8[0];
 119   5                        //PWMCPUDL1 = pwm_channels[3].u8[1];
 120   5                        //PWMCPUDH1 = pwm_channels[3].u8[0];
 121   5                        //PWMCFG1 |= PWMCFG1_PWMEN__ENABLE;
 122   5                        //SFRPAGE = 0x00;
 123   5                    }
 124   4                }
 125   3            }
 126   2      
 127   2            // check for timeout
 128   2            if(timeout_tick){
 129   3                timeout_tick = false;
 130   3                timeout_counter++;
 131   3                if(timeout_counter>3760){ // about 60 seconds
 132   4                    // going power down due to no signal from transmitter
 133   4                    led_pattern = 2; // fast blink
 134   4                    delay_powering_counter = 0;
 135   4                    while(delay_powering_counter < 50);
 136   4                    goPowerDown();
 137   4                }
 138   3            }
 139   2      
 140   2            // check voltage
 141   2            if(isVoltageLow() && led_pattern !=2) led_pattern = 3;
 142   2        }
 143   1      
 144   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    302    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
