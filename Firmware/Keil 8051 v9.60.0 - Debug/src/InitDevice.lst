C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/04/2023 21:11:43 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5_3\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\src\Tennp\G
                    -it\SBUS_PWM_PWR\Firmware\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZ
                    -E(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/SiliconLabs/SimplicityStudio/v5_3/developer/sdks/8051/
                    -v4.2.3//Device/EFM8BB51/inc;C:/SiliconLabs/SimplicityStudio/v5_3/developer/sdks/8051/v4.2.3//Device/shared/si8051Base) P
                    -RINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //#pragma src
   2          //=========================================================
   3          // src/InitDevice.c: generated by Hardware Configurator
   4          //
   5          // This file will be regenerated when saving a document.
   6          // leave the sections inside the "$[...]" comment tags alone
   7          // or they will be overwritten!
   8          //=========================================================
   9          
  10          // USER INCLUDES
  11          #include "main.h"
  12          #include "InitDevice.h"
  13          
  14          
  15          extern void enter_DefaultMode_from_RESET(void) {
  16   1              WDT_0_enter_DefaultMode_from_RESET(); //SFR PAGE=0x00
  17   1              PORTS_0_enter_DefaultMode_from_RESET(); //SFR PAGE=0x00
  18   1              PORTS_1_enter_DefaultMode_from_RESET(); //SFR PAGE=0x00
  19   1              PBCFG_0_enter_DefaultMode_from_RESET(); //SFR PAGE=0x00
  20   1              CIP51_0_enter_DefaultMode_from_RESET(); //SFR PAGE=0x10
  21   1              CLOCK_0_enter_DefaultMode_from_RESET(); //SFR PAGE=0x00
  22   1              PCA_0_enter_DefaultMode_from_RESET(); //SFR PAGE=0x00
  23   1              PCACH_0_enter_DefaultMode_from_RESET(); //SFR PAGE=0x00
  24   1              PCACH_1_enter_DefaultMode_from_RESET(); //SFR PAGE=0x00
  25   1              UARTE_1_enter_DefaultMode_from_RESET (); //SFR PAGE=0x20
  26   1              CLU_0_enter_DefaultMode_from_RESET(); //SFR PAGE=0x20
  27   1              CLU_1_enter_DefaultMode_from_RESET (); //SFR PAGE=0x20
  28   1        CL_0_enter_DefaultMode_from_RESET (); //SFR PAGE=0x20
  29   1        CMP_1_enter_DefaultMode_from_RESET (); //SFR PAGE=0x30
  30   1        ADC_0_enter_DefaultMode_from_RESET (); //SFR PAGE=0x30
  31   1        PWM_0_enter_DefaultMode_from_RESET (); //SFR PAGE=0x10
  32   1        TIMER16_2_enter_DefaultMode_from_RESET(); //SFR PAGE=0x10
  33   1        TIMER16_3_enter_DefaultMode_from_RESET(); //SFR PAGE=0x10
  34   1        INTERRUPT_0_enter_DefaultMode_from_RESET(); //SFR PAGE=0x00
  35   1      
  36   1      }
  37          
  38          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
  39   1              // $[Watchdog Timer Init Variable Declarations]
  40   1              uint32_t i;
  41   1              bool ea;
  42   1              // [Watchdog Timer Init Variable Declarations]$
  43   1      
  44   1              // $[WDTCN - Watchdog Timer Control]
  45   1              // Deprecated
  46   1              // [WDTCN - Watchdog Timer Control]$
  47   1      
  48   1              // $[WDTCN_2 - Watchdog Timer Control]
  49   1              SFRPAGE = 0x00;
  50   1      
  51   1              // Feed WDT timer before disabling (Erratum WDT_E102)
  52   1              WDTCN = 0xA5;
C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/04/2023 21:11:43 PAGE 2   

  53   1      
  54   1              // Add 2 LFO cycle delay before disabling WDT (Erratum WDT_E102)
  55   1              for (i = 0; i < (2 * 3062500UL) / (80000 * 3); i++) {
  56   2                      NOP();
  57   2              }
  58   1      
  59   1              // Disable WDT
  60   1              ea = IE_EA;
  61   1              IE_EA = 0;
  62   1              WDTCN = 0xDE;
  63   1              WDTCN = 0xAD;
  64   1              IE_EA = ea;
  65   1      
  66   1              // [WDTCN_2 - Watchdog Timer Control]$
  67   1      
  68   1      }
  69          
  70          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
  71   1      
  72   1              P0MDOUT = P0MDOUT_B0__OPEN_DRAIN
  73   1                      | P0MDOUT_B1__OPEN_DRAIN
  74   1                      | P0MDOUT_B2__OPEN_DRAIN
  75   1                      | P0MDOUT_B3__OPEN_DRAIN
  76   1                      | P0MDOUT_B4__OPEN_DRAIN
  77   1                      | P0MDOUT_B5__OPEN_DRAIN
  78   1                      | P0MDOUT_B6__PUSH_PULL
  79   1                      | P0MDOUT_B7__OPEN_DRAIN;
  80   1      
  81   1              P0MDIN = P0MDIN_B0__DIGITAL
  82   1                     | P0MDIN_B1__DIGITAL
  83   1                     | P0MDIN_B2__DIGITAL
  84   1                     | P0MDIN_B3__DIGITAL
  85   1                     | P0MDIN_B4__DIGITAL
  86   1                     | P0MDIN_B5__DIGITAL
  87   1                     | P0MDIN_B6__DIGITAL
  88   1                     | P0MDIN_B7__DIGITAL;
  89   1      
  90   1              P0SKIP = P0SKIP_B0__SKIPPED
  91   1                     | P0SKIP_B1__SKIPPED
  92   1                     | P0SKIP_B2__NOT_SKIPPED
  93   1                     | P0SKIP_B3__SKIPPED
  94   1                     | P0SKIP_B4__NOT_SKIPPED
  95   1                     | P0SKIP_B5__SKIPPED
  96   1                     | P0SKIP_B6__NOT_SKIPPED
  97   1                     | P0SKIP_B7__NOT_SKIPPED;
  98   1      
  99   1      }
 100          
 101          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 102   1      
 103   1        //PIN_BUTB = 0;
 104   1      
 105   1        P1MDOUT = P1MDOUT_B0__OPEN_DRAIN
 106   1                | P1MDOUT_B1__OPEN_DRAIN
 107   1                | P1MDOUT_B2__OPEN_DRAIN
 108   1                | P1MDOUT_B3__OPEN_DRAIN
 109   1                | P1MDOUT_B4__OPEN_DRAIN
 110   1                | P1MDOUT_B5__OPEN_DRAIN
 111   1                | P1MDOUT_B6__OPEN_DRAIN;
 112   1      
 113   1              P1MDIN = P1MDIN_B0__DIGITAL
 114   1                     | P1MDIN_B1__DIGITAL
 115   1                     | P1MDIN_B2__DIGITAL
C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/04/2023 21:11:43 PAGE 3   

 116   1                     | P1MDIN_B3__ANALOG
 117   1                     | P1MDIN_B4__DIGITAL
 118   1                     | P1MDIN_B5__DIGITAL
 119   1                     | P1MDIN_B6__DIGITAL;
 120   1      
 121   1              P1SKIP = P1SKIP_B0__SKIPPED
 122   1                     | P1SKIP_B1__SKIPPED
 123   1                     | P1SKIP_B2__SKIPPED
 124   1                     | P1SKIP_B3__SKIPPED
 125   1                     | P1SKIP_B4__NOT_SKIPPED
 126   1                     | P1SKIP_B5__NOT_SKIPPED
 127   1                     | P1SKIP_B6__NOT_SKIPPED;
 128   1      
 129   1      }
 130          
 131          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 132   1              XBR1 = XBR1_PCA0ME__CEX0_TO_CEX1;
 133   1      
 134   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED
 135   1                   | XBR2_XBARE__ENABLED
 136   1                   | XBR2_PWME__PWM0CH01
 137   1                   | XBR2_URT1E__ENABLED;
 138   1      
 139   1      }
 140          
 141          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 142   1              // $[HFOSC1 Setup]
 143   1              // Ensure SYSCLK is > 24 MHz before switching to HFOSC1
 144   1              SFRPAGE = 0x00;
 145   1        CLKSEL = CLKSEL_CLKSL__HFOSC0_clk24p5 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 146   1              while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY)
 147   1                      ;
 148   1              // [HFOSC1 Setup]$
 149   1      
 150   1              // $[CLKSEL - Clock Select]
 151   1              /***********************************************************************
 152   1               - Clock derived from the Internal High Frequency Oscillator 1
 153   1               - SYSCLK is equal to selected clock source divided by 1
 154   1               ***********************************************************************/
 155   1        CLKSEL = CLKSEL_CLKSL__HFOSC0_clk49 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 156   1              while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY)
 157   1                      ;
 158   1              // [CLKSEL - Clock Select]$
 159   1      
 160   1      }
 161          
 162          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
 163   1              // $[PCA Off]
 164   1              PCA0CN0_CR = PCA0CN0_CR__STOP;
 165   1              // [PCA Off]$
 166   1      
 167   1               /***********************************************************************
 168   1                 - PCA continues to function normally while the system controller is in
 169   1                 Idle Mode
 170   1                 - Disable the CF interrupt
 171   1                 - System clock divided by 4
 172   1                 ***********************************************************************/
 173   1                PCA0MD = PCA0MD_CIDL__NORMAL | PCA0MD_ECF__OVF_INT_DISABLED
 174   1                    | PCA0MD_CPS__SYSCLK_DIV_4;
 175   1      
 176   1              // PCA Center Alignment Enable
 177   1                PCA0CENT = PCA0CENT_CEX0CEN__CENTER | PCA0CENT_CEX1CEN__CENTER;
 178   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/04/2023 21:11:43 PAGE 4   

 179   1      
 180   1              // PCA Output Polarity (start with non inverted to get high outputs)
 181   1              //PCA0POL = PCA0POL_CEX0POL__INVERT | PCA0POL_CEX1POL__INVERT;
 182   1      
 183   1              PCA0CN0_CR = PCA0CN0_CR__RUN;
 184   1      
 185   1      }
 186          
 187          extern void PCACH_0_enter_DefaultMode_from_RESET(void) {
 188   1        // $[PCA0 Settings Save]
 189   1        // Select Capture/Compare register)
 190   1        PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 191   1        // [PCA0 Settings Save]$
 192   1      
 193   1        // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]
 194   1        /***********************************************************************
 195   1         - Disable negative edge capture
 196   1         - Enable a Capture/Compare Flag interrupt request when CCF0 is set
 197   1         - Enable match function
 198   1         - 16-bit PWM selected
 199   1         - Disable positive edge capture
 200   1         - Enable comparator function
 201   1         - Enable PWM function
 202   1         - Disable toggle function
 203   1         ***********************************************************************/
 204   1        PCA0CPM0 = PCA0CPM0_CAPN__DISABLED | PCA0CPM0_ECCF__ENABLED
 205   1            | PCA0CPM0_MAT__ENABLED | PCA0CPM0_PWM16__16_BIT
 206   1            | PCA0CPM0_CAPP__DISABLED | PCA0CPM0_ECOM__ENABLED | PCA0CPM0_PWM__ENABLED
 207   1            | PCA0CPM0_TOG__DISABLED;
 208   1        // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]$
 209   1      
 210   1        // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
 211   1        // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
 212   1      
 213   1        // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
 214   1        PCA0CPH0 = 0x00;
 215   1        // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
 216   1      
 217   1        // $[Auto-reload]
 218   1        // [Auto-reload]$
 219   1      
 220   1        // $[PCA0 Settings Restore]
 221   1        // [PCA0 Settings Restore]$
 222   1      
 223   1      }
 224          
 225          extern void PCACH_1_enter_DefaultMode_from_RESET(void) {
 226   1        // $[PCA0 Settings Save]
 227   1        // Select Capture/Compare register)
 228   1        PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 229   1        // [PCA0 Settings Save]$
 230   1      
 231   1        // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]
 232   1        /***********************************************************************
 233   1         - Disable negative edge capture
 234   1         - Enable a Capture/Compare Flag interrupt request when CCF0 is set
 235   1         - Enable match function
 236   1         - 16-bit PWM selected
 237   1         - Disable positive edge capture
 238   1         - Enable comparator function
 239   1         - Enable PWM function
 240   1         - Disable toggle function
 241   1         ***********************************************************************/
C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/04/2023 21:11:43 PAGE 5   

 242   1        PCA0CPM1 = PCA0CPM1_CAPN__DISABLED | PCA0CPM1_ECCF__ENABLED
 243   1            | PCA0CPM1_MAT__ENABLED | PCA0CPM1_PWM16__16_BIT
 244   1            | PCA0CPM1_CAPP__DISABLED | PCA0CPM1_ECOM__ENABLED | PCA0CPM1_PWM__ENABLED
 245   1            | PCA0CPM1_TOG__DISABLED;
 246   1        // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]$
 247   1      
 248   1        // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
 249   1        // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
 250   1      
 251   1        // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
 252   1        PCA0CPH1 = 0x00;
 253   1        // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
 254   1      
 255   1        // $[Auto-reload]
 256   1        // [Auto-reload]$
 257   1      
 258   1        // $[PCA0 Settings Restore]
 259   1        // [PCA0 Settings Restore]$
 260   1      
 261   1      }
 262          
 263          
 264          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 265   1        SFRPAGE = 0x00;
 266   1      
 267   1        // $[EIE1 - Extended Interrupt Enable 1]
 268   1              /***********************************************************************
 269   1               - Disable ADC0 Conversion Complete interrupt
 270   1               - Disable ADC0 Window Comparison interrupt
 271   1               - Disable CP0 interrupts
 272   1               - Disable CP1 interrupts
 273   1               - Disable interrupt requests generated by a Port Match
 274   1               - Enable interrupt requests generated by PCA0
 275   1               - Disable all SMB0 interrupts
 276   1               - Enable Timer 3 interrupts
 277   1               ***********************************************************************/
 278   1              EIE1 = EIE1_EADC0__DISABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
 279   1                              | EIE1_ECP1__DISABLED | EIE1_EMAT__DISABLED | EIE1_EPCA0__ENABLED
 280   1                              | EIE1_ESMB0__DISABLED | EIE1_ET3__ENABLED;
 281   1              // [EIE1 - Extended Interrupt Enable 1]$
 282   1      
 283   1              EIE2 = EIE2_EPWM0__ENABLED | EIE2_ES1__ENABLED; // UART1 interrupt
 284   1      
 285   1              /***********************************************************************
 286   1               - Disable each interrupt according to its individual mask setting
 287   1               - Disable external interrupt 0
 288   1               - Disable external interrupt 1
 289   1               - Disable all SPI0 interrupts
 290   1               - Disable all Timer 0 interrupt
 291   1               - Disable all Timer 1 interrupt
 292   1               - Enable interrupt requests generated by the TF2L or TF2H flags
 293   1               - Disable UART0 interrupt
 294   1               ***********************************************************************/
 295   1              IE = IE_EA__DISABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 296   1                              | IE_ESPI0__DISABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 297   1                              | IE_ET2__ENABLED | IE_ES0__DISABLED;
 298   1      
 299   1              // $[IP - Interrupt Priority]
 300   1              // [IP - Interrupt Priority]$
 301   1      
 302   1              // $[IPH - Interrupt Priority High]
 303   1              // [IPH - Interrupt Priority High]$
 304   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/04/2023 21:11:43 PAGE 6   

 305   1      }
 306          
 307          
 308          
 309          extern void CIP51_0_enter_DefaultMode_from_RESET(void) {
 310   1              // $[PFE0CN - Prefetch Engine Control]
 311   1              /***********************************************************************
 312   1               - Enable the prefetch engine 
 313   1               - SYSCLK < 50 MHz
 314   1               ***********************************************************************/
 315   1              SFRPAGE = 0x10;
 316   1              PFE0CN = PFE0CN_FLRT__SYSCLK_BELOW_50_MHZ;
 317   1              // [PFE0CN - Prefetch Engine Control]$
 318   1      
 319   1      }
 320          
 321          
 322          extern void UARTE_1_enter_DefaultMode_from_RESET (void)
 323          {
 324   1        // $[SBCON1 - UART1 Baud Rate Generator Control]
 325   1        /***********************************************************************
 326   1         - Enable the baud rate generator
 327   1         - Prescaler = 1
 328   1         ***********************************************************************/
 329   1        SFRPAGE = 0x20;
 330   1        SBCON1 = SBCON1_BREN__ENABLED | SBCON1_BPS__DIV_BY_1;
 331   1        // [SBCON1 - UART1 Baud Rate Generator Control]$
 332   1      
 333   1        // $[SMOD1 - UART1 Mode]
 334   1        /***********************************************************************
 335   1         - 8 bits
 336   1         - Enable hardware parity
 337   1         - Disable the extra bit
 338   1         - Even
 339   1         - Long: Stop bit is active for two bit times
 340   1         - RI will be activated after the data is received
 341   1         ***********************************************************************/
 342   1        SMOD1 = SMOD1_SDL__8_BITS | SMOD1_PE__PARITY_ENABLED | SMOD1_XBE__DISABLED
 343   1            | SMOD1_SPT__EVEN_PARITY | SMOD1_SBL__LONG | SMOD1_MCE__MULTI_DISABLED;
 344   1        // [SMOD1 - UART1 Mode]$
 345   1      
 346   1        UART1PCF = UART1PCF_RXSEL__CLU1; // RX routed to CLU1.out
 347   1      
 348   1        // $[SBRLH1 - UART1 Baud Rate Generator High Byte]
 349   1        /***********************************************************************
 350   1         - UART1 Baud Rate Reload High = 0xFF
 351   1         ***********************************************************************/
 352   1        SBRLH1 = (0xFF << SBRLH1_BRH__SHIFT);
 353   1        // [SBRLH1 - UART1 Baud Rate Generator High Byte]$
 354   1      
 355   1        // $[SBRLL1 - UART1 Baud Rate Generator Low Byte]
 356   1        /***********************************************************************
 357   1         - UART1 Baud Rate Reload Low = 0x0B
 358   1         ***********************************************************************/
 359   1        SBRLL1 = (0x0B << SBRLL1_BRL__SHIFT);
 360   1        // [SBRLL1 - UART1 Baud Rate Generator Low Byte]$
 361   1      
 362   1        // $[UART1LIN - UART1 LIN Configuration]
 363   1        // [UART1LIN - UART1 LIN Configuration]$
 364   1      
 365   1        // $[SCON1 - UART1 Serial Port Control]
 366   1        /***********************************************************************
 367   1         - UART1 reception enabled
C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/04/2023 21:11:43 PAGE 7   

 368   1         ***********************************************************************/
 369   1      
 370   1        SCON1 |= SCON1_REN__RECEIVE_ENABLED;
 371   1        // [SCON1 - UART1 Serial Port Control]$
 372   1      
 373   1        UART1FCN1_RIE = 1; // Receive interrupt
 374   1      
 375   1      }
 376          
 377          extern void CLU_0_enter_DefaultMode_from_RESET (void)
 378          {
 379   1        // $[CLU0FN - Configurable Logic Unit 0 Function Select]
 380   1        /***********************************************************************
 381   1         - CLU Look-Up-Table function select = 0xF0
 382   1         ***********************************************************************/
 383   1        CLU0FN = (0xF0 << CLU0FN_FNSEL__SHIFT);
 384   1        // [CLU0FN - Configurable Logic Unit 0 Function Select]$
 385   1      
 386   1        // $[CLU0MX - Configurable Logic Unit 0 Multiplexer]
 387   1        /***********************************************************************
 388   1         - Select CLU0A.12
 389   1         - Select CLU0B.0
 390   1         ***********************************************************************/
 391   1        CLU0MX = CLU0MX_MXA__CLU0A12 | CLU0MX_MXB__CLU0B0;
 392   1        // [CLU0MX - Configurable Logic Unit 0 Multiplexer]$
 393   1      
 394   1        // $[CLU0CF - Configurable Logic Unit 0 Configuration]
 395   1        /***********************************************************************
 396   1         - Select LUT output
 397   1         ***********************************************************************/
 398   1        CLU0CF |= CLU0CF_OUTSEL__LUT;
 399   1        // [CLU0CF - Configurable Logic Unit 0 Configuration]$
 400   1      
 401   1      }
 402          
 403          extern void CLU_1_enter_DefaultMode_from_RESET (void)
 404          {
 405   1        // $[CLU1FN - Configurable Logic Unit 1 Function Select]
 406   1        /***********************************************************************
 407   1         - CLU Look-Up-Table function select = 0x0F
 408   1         ***********************************************************************/
 409   1        CLU1FN = (0x0F << CLU1FN_FNSEL__SHIFT);
 410   1        // [CLU1FN - Configurable Logic Unit 1 Function Select]$
 411   1      
 412   1        // $[CLU1MX - Configurable Logic Unit 1 Multiplexer]
 413   1        /***********************************************************************
 414   1         - Select CLU1A.10
 415   1         - Select CLU1B.0
 416   1         ***********************************************************************/
 417   1        CLU1MX = CLU1MX_MXA__CLU1A10 | CLU1MX_MXB__CLU1B0;
 418   1        // [CLU1MX - Configurable Logic Unit 1 Multiplexer]$
 419   1      
 420   1        // $[CLU1CF - Configurable Logic Unit 1 Configuration]
 421   1        /***********************************************************************
 422   1         - Select LUT output
 423   1         ***********************************************************************/
 424   1        CLU1CF = CLU1CF_OUTSEL__LUT;// | CLU1CF_OEN__ENABLE;
 425   1        // [CLU1CF - Configurable Logic Unit 1 Configuration]$
 426   1      
 427   1      
 428   1      }
 429          
 430          extern void CL_0_enter_DefaultMode_from_RESET (void)
C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/04/2023 21:11:43 PAGE 8   

 431          {
 432   1        /***********************************************************************
 433   1         - CLU0 is enabled
 434   1         - CLU1 is enabled
 435   1         - CLU2 is disabled. The output of the block will be logic low
 436   1         - CLU3 is disabled. The output of the block will be logic low
 437   1         ***********************************************************************/
 438   1        CLEN0 = CLEN0_C0EN__ENABLE | CLEN0_C1EN__ENABLE | CLEN0_C2EN__DISABLE
 439   1            | CLEN0_C3EN__DISABLE;
 440   1      
 441   1      }
 442          
 443          extern void PWM_0_enter_DefaultMode_from_RESET (void)
 444          {
 445   1        SFRPAGE = 0x10;
 446   1        PWMCFG0 = PWMCFG0_PWMMODE__EDGE | PWMCFG0_PWMCLKEN__ENABLE | PWMCFG0_SYNCUPD__CH0CH1;
 447   1        PWMCFG2 = PWMCFG2_CH0EN__ENABLE | PWMCFG2_CH1EN__ENABLE | PWMCFG2_CNTRZERO__ZERO;
 448   1        PWMCKDIV = 3; // divide SYSCLK by 8
 449   1        PWMLIML = 0xFF;
 450   1        PWMLIMH = 0xFF;
 451   1        PWMIE = PWMIE_CTROVIE__ENABLE; // Enable overflow interrupt
 452   1        PWMCFG1 = PWMCFG1_PWMLTSYS__LTSYSCK | PWMCFG1_PWMEN__ENABLE; // start PWM0
 453   1      
 454   1      }
 455          
 456          extern void TIMER16_2_enter_DefaultMode_from_RESET (void)
 457          {
 458   1        TMR2CN1 = TMR2CN1_RLFSEL__CLU0_OUT; // force reload from CLU0.out
 459   1      
 460   1        /***********************************************************************
 461   1         - Timer 2 Reload value for 3ms overflows
 462   1         ***********************************************************************/
 463   1        TMR2RLH = (0xF0 << TMR2RLH_TMR2RLH__SHIFT);
 464   1        TMR2RLL = (0x0D << TMR2RLL_TMR2RLL__SHIFT);
 465   1      
 466   1        TMR2CN0 |= TMR2CN0_TR2__RUN;
 467   1      
 468   1      }
 469          
 470          extern void TIMER16_3_enter_DefaultMode_from_RESET (void)
 471          {
 472   1        TMR3CN0 |= TMR3CN0_TR3__RUN;
 473   1      }
 474          
 475          extern void CMP_1_enter_DefaultMode_from_RESET(void)
 476          {
 477   1        SFRPAGE = 0x30;
 478   1        CMP1MX = CMP1MX_CMXP__CMP1P1 | CMP1MX_CMXN__CMP1N11;
 479   1        CMP1CN1 = CMP1CN1_DACEN__ENABLED | 14;
 480   1        CMP1CN0 = CMP1CN0_CPEN__ENABLED;
 481   1      
 482   1      }
 483          
 484          extern void ADC_0_enter_DefaultMode_from_RESET (void)
 485          {
 486   1        CLKGRP0 |= CLKGRP0_EN_CPCLK__ENABLE | CLKGRP0_CLKDIVSL__DIV2;
 487   1        CLKGRP0 |= CLKGRP0_EN_SARCLK__ENABLE;
 488   1      
 489   1        ADC0CN2 = ADC0CN2_VDDDIV_INP__VDD_DIV;
 490   1      
 491   1        // - Conversion Tracking Time = 0x18
 492   1        // 400ns minimum
 493   1        // Tadtk = ADTK / (Fsarclk)
C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/04/2023 21:11:43 PAGE 9   

 494   1        ADC0CF1 = (0x18 << ADC0CF1_ADTK__SHIFT);
 495   1      
 496   1        ADC0CF2 = ADC0CF2_REFSL__1V2;
 497   1      
 498   1        ADC0MX = ADC0MX_ADC0MX__VDD_DIV;
 499   1      
 500   1        ADC0CN0 |= ADC0CN0_ADEN__ENABLED;
 501   1      
 502   1      }
 503          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    356    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
